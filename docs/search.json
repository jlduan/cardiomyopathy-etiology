[
  {
    "objectID": "cardiomyopathy.html#functions",
    "href": "cardiomyopathy.html#functions",
    "title": "Accurate Classification of Cardiomyopathy Diagnosis by Chromatin Accessibility",
    "section": "Functions",
    "text": "Functions\n\n\n\nLoad required packages.\n\nlibrary(tidyverse)\n## ── Attaching packages ────────────────────────────────── tidyverse 1.3.2.9000 ──\n## ✔ ggplot2   3.3.6.9000        ✔ dplyr     1.0.99.9000  \n## ✔ tibble    3.1.8.9001        ✔ stringr   1.4.1.9000   \n## ✔ tidyr     1.2.1.9000        ✔ forcats   0.5.2.9000   \n## ✔ readr     2.1.2.9000        ✔ lubridate 1.8.0.9000   \n## ✔ purrr     0.9000.0.9000     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\nlibrary(Matrix)\n## \n## Attaching package: 'Matrix'\n## \n## The following objects are masked from 'package:tidyr':\n## \n##     expand, pack, unpack\nlibrary(patchwork)\nlibrary(extrafont)\n## Registering fonts with R\n\n\nsource(\n    file = file.path(\n        SCRIPT_DIR,\n        \"utilities.R\"\n    )\n)\n\n\n`%+replace%` <- ggplot2::`%+replace%`"
  },
  {
    "objectID": "cardiomyopathy.html#python-env",
    "href": "cardiomyopathy.html#python-env",
    "title": "Accurate Classification of Cardiomyopathy Diagnosis by Chromatin Accessibility",
    "section": "Python env",
    "text": "Python env\n\nnp <- reticulate::import(\"numpy\", convert = TRUE)\ncat(\"numpy version:\", np$`__version__`, \"\\n\")\n\nnumpy version: 1.22.4 \n\n\n\nreticulate::py_config()\n\npython:         /Users/jialei/.pyenv/shims/python\nlibpython:      /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/libpython3.9.dylib\npythonhome:     /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10:/Users/jialei/.pyenv/versions/mambaforge-4.10.3-10\nversion:        3.9.13 | packaged by conda-forge | (main, May 27 2022, 17:00:33)  [Clang 13.0.1 ]\nnumpy:          /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/python3.9/site-packages/numpy\nnumpy_version:  1.22.4\nnumpy:          /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/python3.9/site-packages/numpy\n\nNOTE: Python version was forced by RETICULATE_PYTHON"
  },
  {
    "objectID": "cardiomyopathy.html#pairwise-comparison",
    "href": "cardiomyopathy.html#pairwise-comparison",
    "title": "Accurate Classification of Cardiomyopathy Diagnosis by Chromatin Accessibility",
    "section": "Pairwise comparison",
    "text": "Pairwise comparison\n\nsamples_combn <- combinat::combn(x = names(samples), m = 2)\n\ndiff_peaks <- purrr::map(seq_len(ncol(samples_combn)), \\(x) {\n    sample_names_a <- samples[[samples_combn[, x][1]]]\n    sample_names_b <- samples[[samples_combn[, x][2]]]\n\n    cat(length(sample_names_a), \"\\n\")\n    cat(sample_names_a, \"\\n\")\n    cat(length(sample_names_b), \"\\n\")\n    cat(sample_names_b, \"\\n\")\n\n    compute_diff_peaks(\n        matrix = matrix_readcount_use,\n        group_a = sample_names_a,\n        group_b = sample_names_b,\n        num_thread = parallel::detectCores() - 1\n    )\n})\n\n12 \nF1_1 F1_2 F2_1 F2_2 F5_1 F5_2 P3_1 P3_2 P5_1 P5_2 P6_1 P6_2 \n10 \nP104a_1 P104a_2 P117b_1 P117b_2 P123b_1 P123b_2 P131a_1 P131a_2 P92a_1 P92a_2 \n12 \n10 \n22 \n\n\nWarning in DESeqDataSet(se, design = design, ignoreRank): some variables in\ndesign formula are characters, converting to factors\n\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\n\nout of 206017 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 20685, 10%\nLFC < 0 (down)     : 16920, 8.2%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\n12 \nF1_1 F1_2 F2_1 F2_2 F5_1 F5_2 P3_1 P3_2 P5_1 P5_2 P6_1 P6_2 \n10 \nP114b_1 P114b_2 P59a_1 P59a_2 P60a_1 P60a_2 P73a_1 P73a_2 P87a_1 P87a_2 \n12 \n10 \n22 \n\n\nWarning in DESeqDataSet(se, design = design, ignoreRank): some variables in\ndesign formula are characters, converting to factors\n\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\n-- replacing outliers and refitting for 3 genes\n-- DESeq argument 'minReplicatesForReplace' = 7 \n-- original counts are preserved in counts(dds)\n\n\nestimating dispersions\n\n\nfitting model and testing\n\n\n\nout of 206019 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 7721, 3.7%\nLFC < 0 (down)     : 4264, 2.1%\noutliers [1]       : 0, 0%\nlow counts [2]     : 31954, 16%\n(mean count < 5)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\n12 \nF1_1 F1_2 F2_1 F2_2 F5_1 F5_2 P3_1 P3_2 P5_1 P5_2 P6_1 P6_2 \n10 \nHOCM4_1 HOCM4_2 HOCM6_1 HOCM6_2 HOCM9_1 HOCM9_2 HOCM11_1 HOCM11_2 HOCM7_1 HOCM7_2 \n12 \n10 \n22 \n\n\nWarning in DESeqDataSet(se, design = design, ignoreRank): some variables in\ndesign formula are characters, converting to factors\n\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\n-- replacing outliers and refitting for 4 genes\n-- DESeq argument 'minReplicatesForReplace' = 7 \n-- original counts are preserved in counts(dds)\n\n\nestimating dispersions\n\n\nfitting model and testing\n\n\n\nout of 206019 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 3112, 1.5%\nLFC < 0 (down)     : 3829, 1.9%\noutliers [1]       : 0, 0%\nlow counts [2]     : 23966, 12%\n(mean count < 4)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\n10 \nP104a_1 P104a_2 P117b_1 P117b_2 P123b_1 P123b_2 P131a_1 P131a_2 P92a_1 P92a_2 \n10 \nP114b_1 P114b_2 P59a_1 P59a_2 P60a_1 P60a_2 P73a_1 P73a_2 P87a_1 P87a_2 \n10 \n10 \n20 \n\n\nWarning in DESeqDataSet(se, design = design, ignoreRank): some variables in\ndesign formula are characters, converting to factors\n\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\n-- replacing outliers and refitting for 3 genes\n-- DESeq argument 'minReplicatesForReplace' = 7 \n-- original counts are preserved in counts(dds)\n\n\nestimating dispersions\n\n\nfitting model and testing\n\n\n\nout of 206018 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 7031, 3.4%\nLFC < 0 (down)     : 12331, 6%\noutliers [1]       : 0, 0%\nlow counts [2]     : 59914, 29%\n(mean count < 5)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\n10 \nP104a_1 P104a_2 P117b_1 P117b_2 P123b_1 P123b_2 P131a_1 P131a_2 P92a_1 P92a_2 \n10 \nHOCM4_1 HOCM4_2 HOCM6_1 HOCM6_2 HOCM9_1 HOCM9_2 HOCM11_1 HOCM11_2 HOCM7_1 HOCM7_2 \n10 \n10 \n20 \n\n\nWarning in DESeqDataSet(se, design = design, ignoreRank): some variables in\ndesign formula are characters, converting to factors\n\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\n-- replacing outliers and refitting for 5 genes\n-- DESeq argument 'minReplicatesForReplace' = 7 \n-- original counts are preserved in counts(dds)\n\n\nestimating dispersions\n\n\nfitting model and testing\n\n\n\nout of 206019 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 9286, 4.5%\nLFC < 0 (down)     : 15191, 7.4%\noutliers [1]       : 0, 0%\nlow counts [2]     : 39943, 19%\n(mean count < 5)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\n10 \nP114b_1 P114b_2 P59a_1 P59a_2 P60a_1 P60a_2 P73a_1 P73a_2 P87a_1 P87a_2 \n10 \nHOCM4_1 HOCM4_2 HOCM6_1 HOCM6_2 HOCM9_1 HOCM9_2 HOCM11_1 HOCM11_2 HOCM7_1 HOCM7_2 \n10 \n10 \n20 \n\n\nWarning in DESeqDataSet(se, design = design, ignoreRank): some variables in\ndesign formula are characters, converting to factors\n\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\n-- replacing outliers and refitting for 5 genes\n-- DESeq argument 'minReplicatesForReplace' = 7 \n-- original counts are preserved in counts(dds)\n\n\nestimating dispersions\n\n\nfitting model and testing\n\n\n\nout of 206018 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 3799, 1.8%\nLFC < 0 (down)     : 7798, 3.8%\noutliers [1]       : 0, 0%\nlow counts [2]     : 79885, 39%\n(mean count < 7)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nnames(diff_peaks) <- purrr::map_chr(\n    seq_len(ncol(samples_combn)), \\(x) {\n        paste(samples_combn[, x], collapse = \"_vs_\")\n    }\n)\n\n\n\n\n\n\n\n\nFC_THRESHOLD <- 1\nPADJ_THRESHOLD <- 0.01\n\nfeatures_selected <- purrr::map(diff_peaks, \\(x) {\n    x |>\n        as.data.frame() |>\n        dplyr::filter(\n            padj < PADJ_THRESHOLD,\n            abs(log2FoldChange) >= FC_THRESHOLD\n        ) |>\n        tibble::rownames_to_column(var = \"feature\") |>\n        pull(feature)\n}) |>\n    unlist() |>\n    unique()\n\nLoading required package: DESeq2\n\n\nLoading required package: S4Vectors\n\n\nLoading required package: stats4\n\n\nLoading required package: BiocGenerics\n\n\n\nAttaching package: 'BiocGenerics'\n\n\nThe following objects are masked from 'package:lubridate':\n\n    intersect, setdiff, union\n\n\nThe following objects are masked from 'package:dplyr':\n\n    combine, intersect, setdiff, union\n\n\nThe following objects are masked from 'package:stats':\n\n    IQR, mad, sd, var, xtabs\n\n\nThe following objects are masked from 'package:base':\n\n    anyDuplicated, append, as.data.frame, basename, cbind, colnames,\n    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,\n    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,\n    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,\n    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,\n    union, unique, unsplit, which.max, which.min\n\n\n\nAttaching package: 'S4Vectors'\n\n\nThe following objects are masked from 'package:Matrix':\n\n    expand, unname\n\n\nThe following objects are masked from 'package:lubridate':\n\n    second, second<-\n\n\nThe following objects are masked from 'package:dplyr':\n\n    first, rename\n\n\nThe following object is masked from 'package:tidyr':\n\n    expand\n\n\nThe following objects are masked from 'package:base':\n\n    expand.grid, I, unname\n\n\nLoading required package: IRanges\n\n\n\nAttaching package: 'IRanges'\n\n\nThe following object is masked from 'package:lubridate':\n\n    %within%\n\n\nThe following objects are masked from 'package:dplyr':\n\n    collapse, desc, slice\n\n\nThe following object is masked from 'package:purrr':\n\n    reduce\n\n\nLoading required package: GenomicRanges\n\n\nLoading required package: GenomeInfoDb\n\n\nLoading required package: SummarizedExperiment\n\n\nLoading required package: MatrixGenerics\n\n\nLoading required package: matrixStats\n\n\n\nAttaching package: 'matrixStats'\n\n\nThe following object is masked from 'package:dplyr':\n\n    count\n\n\n\nAttaching package: 'MatrixGenerics'\n\n\nThe following objects are masked from 'package:matrixStats':\n\n    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,\n    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,\n    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,\n    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,\n    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,\n    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,\n    colWeightedMeans, colWeightedMedians, colWeightedSds,\n    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,\n    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,\n    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,\n    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,\n    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,\n    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,\n    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,\n    rowWeightedSds, rowWeightedVars\n\n\nLoading required package: Biobase\n\n\nWelcome to Bioconductor\n\n    Vignettes contain introductory material; view with\n    'browseVignettes()'. To cite Bioconductor, see\n    'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'.\n\n\n\nAttaching package: 'Biobase'\n\n\nThe following object is masked from 'package:MatrixGenerics':\n\n    rowMedians\n\n\nThe following objects are masked from 'package:matrixStats':\n\n    anyMissing, rowMedians\n\nfeatures_selected |> length()\n\n[1] 5753\n\n\n\n# sanity check\nstopifnot(\n    length(features_selected) == 5753\n)"
  },
  {
    "objectID": "cardiomyopathy.html#healthy-vs.-disease",
    "href": "cardiomyopathy.html#healthy-vs.-disease",
    "title": "Accurate Classification of Cardiomyopathy Diagnosis by Chromatin Accessibility",
    "section": "Healthy vs. disease",
    "text": "Healthy vs. disease\n\ndiff_peaks <- compute_diff_peaks(\n    matrix = matrix_readcount_use,\n    group_a = samples_fresh_healthy,\n    group_b = c(\n        samples_fresh_icm,\n        samples_fresh_nicm,\n        samples_fresh_hcm\n    ),\n    num_thread = parallel::detectCores() - 1\n)\n\n12 \n30 \n42 \n\nout of 206019 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 14884, 7.2%\nLFC < 0 (down)     : 15309, 7.4%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\n\n\n\n\n\nFC_THRESHOLD <- 1\nPADJ_THRESHOLD <- 0.05\n\n\n\nPlot\nData\n\n\n\n\ndiff_peaks |>\n    as.data.frame() |>\n    tibble::rownames_to_column(var = \"feature\") |>\n    dplyr::mutate(\n        da = dplyr::case_when(\n            (\n                (\n                    abs(log2FoldChange) >= FC_THRESHOLD\n                ) & (\n                    padj <= PADJ_THRESHOLD\n                )\n            ) ~ 1,\n            TRUE ~ 0\n        ),\n        da = as.factor(da)\n    ) |>\n    dplyr::arrange(da) |>\n    dplyr::mutate(\n        category = \"Healthy vs Disease\"\n    ) |>\n    {\n        \\(x)\n        x |>\n            ggplot2::ggplot(\n                ggplot2::aes(\n                    x = log2(baseMean),\n                    y = log2FoldChange,\n                    color = da\n                )\n            ) +\n            ggrastr::rasterise(\n                ggplot2::geom_point(\n                    size = 0.4,\n                    alpha = 1,\n                    stroke = 0, shape = 16\n                ),\n                dpi = 900,\n                dev = \"ragg_png\"\n            ) +\n            ggplot2::geom_density_2d(\n                color = \"steelblue\", size = 0.2\n            ) +\n            ggplot2::scale_color_manual(\n                values = c(\"grey65\", \"salmon\"), guide = \"none\"\n            ) +\n            ggplot2::facet_wrap(\n                ggplot2::vars(category),\n                nrow = 1,\n                strip.position = \"top\",\n            ) +\n            ggplot2::labs(\n                x = expression(paste(\"Log\"[2], \" mean\")),\n                y = expression(paste(\"Log\"[2], \" (fold change)\"))\n            ) +\n            ggplot2::geom_text(\n                data = x |>\n                    dplyr::count(da),\n                ggplot2::aes(label = paste(\"Num:\", n)),\n                x = -5,\n                y = 5,\n                color = \"salmon\",\n                fontface = \"bold\",\n                size = 6 / ggplot2::.pt,\n                hjust = 0,\n                vjust = 1\n            ) +\n            ggplot2::theme_light() %+replace%\n            ggplot2::theme(\n                axis.title = ggplot2::element_text(\n                    family = \"Arial\", size = 7\n                ),\n                axis.text = ggplot2::element_text(\n                    family = \"Arial\", size = 7\n                ),\n                panel.background = ggplot2::element_blank(),\n                strip.text = ggplot2::element_text(\n                    family = \"Arial\",\n                    size = 7,\n                    margin = ggplot2::margin(\n                        t = 4.4, r = 4.4, b = 4.4, l = 4.4, unit = \"pt\"\n                    )\n                )\n            )\n    }()\n\n\n\n\n\n\n\n\n\n\ndiff_peaks |>\n    as.data.frame() |>\n    tibble::rownames_to_column(var = \"feature\") |>\n    dplyr::mutate(\n        da = dplyr::case_when(\n            abs(log2FoldChange) >= FC_THRESHOLD & padj <= PADJ_THRESHOLD ~ 1,\n            TRUE ~ 0\n        ),\n        da = as.factor(da)\n    ) |>\n    dplyr::arrange(da) |>\n    dplyr::mutate(\n        category = \"Healthy vs Disease\"\n    ) |>\n    head(n = 12)\n\n           feature    baseMean log2FoldChange     lfcSE        stat     pvalue\n1  1_181358_181567    6.285720    -0.25082657 0.2225674 -1.12696904 0.25975557\n2  1_183716_183885    2.917794    -0.61104587 0.3185859 -1.91799391 0.05511178\n3  1_183999_184321    5.587581    -0.40899805 0.2454201 -1.66652230 0.09560943\n4  1_191239_191880   16.735046    -0.19449895 0.1594596 -1.21973776 0.22256430\n5  1_267894_268128    6.533567     0.05967949 0.2321327  0.25709207 0.79710770\n6  1_629834_630082  704.298690     0.03921131 0.1246965  0.31445402 0.75317623\n7  1_633881_634177 1670.223559    -0.10947573 0.1252210 -0.87426032 0.38197650\n8  1_778297_779354   78.566315     0.01854268 0.1195157  0.15514849 0.87670426\n9  1_794936_795259    7.667010    -0.44843135 0.2054008 -2.18320186 0.02902095\n10 1_816789_817532   15.907760    -0.26947734 0.1423673 -1.89283152 0.05838028\n11 1_818925_819284    7.305783     0.20719291 0.2135904  0.97004803 0.33202255\n12 1_819939_820383    8.225880     0.01173971 0.2131140  0.05508655 0.95606951\n        padj da           category\n1  0.5057420  0 Healthy vs Disease\n2  0.2128599  0 Healthy vs Disease\n3  0.2896372  0 Healthy vs Disease\n4  0.4649598  0 Healthy vs Disease\n5  0.9045374  0 Healthy vs Disease\n6  0.8802030  0 Healthy vs Disease\n7  0.6229343  0 Healthy vs Disease\n8  0.9438932  0 Healthy vs Disease\n9  0.1480275  0 Healthy vs Disease\n10 0.2197918  0 Healthy vs Disease\n11 0.5774971  0 Healthy vs Disease\n12 0.9813831  0 Healthy vs Disease"
  },
  {
    "objectID": "cardiomyopathy.html#heatmap",
    "href": "cardiomyopathy.html#heatmap",
    "title": "Accurate Classification of Cardiomyopathy Diagnosis by Chromatin Accessibility",
    "section": "Heatmap",
    "text": "Heatmap\n\nRASTERISED <- FALSE\n\n\nmatrix_cpm_use <- t(\n    t(matrix_readcount_use) / colSums(matrix_readcount_use)\n) * 1e+06\n\nmatrix_heatmap <- matrix_cpm_use[features_selected, unlist(samples)]\nmatrix_heatmap <- matrix_heatmap[rowSums(matrix_heatmap) != 0, ]\n\nmatrix_heatmap <- log10(matrix_heatmap + 1)\nmatrix_heatmap <- t(scale(t(matrix_heatmap)))\n\nheatmap_limits <- quantile(matrix_heatmap, c(0.05, 0.95))\nmatrix_heatmap[matrix_heatmap < heatmap_limits[1]] <- heatmap_limits[1]\nmatrix_heatmap[matrix_heatmap > heatmap_limits[2]] <- heatmap_limits[2]\n\n\n# hierarchical clustering\nhclust_out_features <- hclust(\n    dist(matrix_heatmap, method = \"euclidean\"),\n    method = \"complete\"\n)\n\nNUM_CENTERS <- 4\nhclust_out_features_df <- cutree(\n    tree = hclust_out_features, k = NUM_CENTERS\n) |>\n    tibble::as_tibble(rownames = \"feature\") |>\n    dplyr::mutate(order = hclust_out_features$order) |>\n    dplyr::rename(hclust_group = value)\n\nhclust_out_features_df <- purrr::map2(\n    c(2, 1, 4, 3), seq_len(NUM_CENTERS), \\(x, y) {\n        hclust_out_features_df |>\n            dplyr::filter(hclust_group == x) |>\n            dplyr::arrange(order) |>\n            dplyr::mutate(group = y)\n    }\n) |>\n    dplyr::bind_rows()\n\n\n\n\n\n# heatmap column annotation\nha_group <- colnames(matrix_heatmap) |>\n    tibble::enframe(value = \"sample\") |>\n    dplyr::left_join(\n        purrr::map(names(samples), \\(x) {\n            data.frame(\n                sample = samples[[x]],\n                group = x\n            )\n        }) |>\n            dplyr::bind_rows(),\n        by = \"sample\"\n    ) |>\n    dplyr::pull(group) |>\n    stringr::str_to_title()\n\nha_column <- ComplexHeatmap::HeatmapAnnotation(\n    group = ComplexHeatmap::anno_simple(\n        ha_group,\n        col = setNames(\n            object = as.character(yarrr::piratepal(palette = \"google\")),\n            nm = names(samples) |>\n                stringr::str_to_title()\n        ),\n        which = \"column\",\n        pt_size = grid::unit(2, \"mm\"),\n        pt_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        simple_anno_size = grid::unit(1.5, \"mm\")\n    ),\n    #\n    show_annotation_name = FALSE,\n    annotation_label = c(\n        \"Group\"\n    ),\n    annotation_name_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    annotation_name_side = \"left\"\n)\n\n\n# heatmap row annotation\nha_region <- hclust_out_features_df |>\n    pull(group) |>\n    {\n        \\(x) paste(\"Signature\", x)\n    }()\n\nha_left <- ComplexHeatmap::HeatmapAnnotation(\n    region = ComplexHeatmap::anno_simple(\n        ha_region,\n        col = setNames(\n            object = as.character(yarrr::piratepal(palette = \"google\")),\n            nm = sort(unique(ha_region))\n        ),\n        which = \"row\",\n        pt_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        simple_anno_size = grid::unit(1.5, \"mm\")\n    ),\n    which = \"row\",\n    show_annotation_name = FALSE,\n    annotation_label = c(\n        \"Region\"\n    ),\n    annotation_name_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6)\n)\n\n\nsample_ids <- tibble::tribble(\n    ~sample_id, ~sample_id_publication,\n    \"F1_1\", \"C1_1\",\n    \"F1_2\", \"C1_2\",\n    \"F2_1\", \"C2_1\",\n    \"F2_2\", \"C2_2\",\n    \"F5_1\", \"C3_1\",\n    \"F5_2\", \"C3_2\",\n    \"P3_1\", \"C4_1\",\n    \"P3_2\", \"C4_2\",\n    \"P5_1\", \"C5_1\",\n    \"P5_2\", \"C5_2\",\n    \"P6_1\", \"C6_1\",\n    \"P6_2\", \"C6_2\",\n    \"P104a_1\", \"I1_1\",\n    \"P104a_2\", \"I1_2\",\n    \"P117b_1\", \"I2_1\",\n    \"P117b_2\", \"I2_2\",\n    \"P123b_1\", \"I3_1\",\n    \"P123b_2\", \"I3_2\",\n    \"P131a_1\", \"I4_1\",\n    \"P131a_2\", \"I4_2\",\n    \"P92a_1\", \"I5_1\",\n    \"P92a_2\", \"I5_2\",\n    \"P114b_1\", \"NI1_1\",\n    \"P114b_2\", \"NI1_2\",\n    \"P59a_1\", \"NI2_1\",\n    \"P59a_2\", \"NI2_2\",\n    \"P60a_1\", \"NI3_1\",\n    \"P60a_2\", \"NI3_2\",\n    \"P73a_1\", \"NI4_1\",\n    \"P73a_2\", \"NI4_2\",\n    \"P87a_1\", \"NI5_1\",\n    \"P87a_2\", \"NI5_2\",\n    \"P75a_1\", \"U1_1\",\n    \"P75a_2\", \"U1_2\",\n    \"P115b_1\", \"U2_1\",\n    \"P115b_2\", \"U2_2\",\n    \"P141a_1\", \"U3_1\",\n    \"P141a_2\", \"U3_2\",\n    \"HOCM4_1\", \"H1_1\",\n    \"HOCM4_2\", \"H1_2\",\n    \"HOCM6_1\", \"H2_1\",\n    \"HOCM6_2\", \"H2_2\",\n    \"HOCM9_1\", \"H3_1\",\n    \"HOCM9_2\", \"H3_2\",\n    \"HOCM11_1\", \"H4_1\",\n    \"HOCM11_2\", \"H4_2\",\n    \"HOCM7_1\", \"H5_1\",\n    \"HOCM7_2\", \"H5_2\",\n    \"MYEC4_2\", \"U6_2\",\n    \"P108b_1\", \"U4_1\",\n    \"P108b_2\", \"U4_2\"\n)\n\nsample_ids <- setNames(\n    object = sample_ids$sample_id_publication,\n    nm = sample_ids$sample_id\n)\n\n\n# heatmap\nht <- ComplexHeatmap::Heatmap(\n    matrix = matrix_heatmap |> as.matrix(),\n    rect_gp = grid::gpar(col = NA, lwd = 0),\n    col = wesanderson::wes_palette(\"Zissou1\", 50, type = \"continuous\"),\n    row_title_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    column_title_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    column_title_rot = 0,\n    #\n    cluster_rows = FALSE,\n    show_row_dend = FALSE,\n    cluster_columns = FALSE,\n    show_column_dend = FALSE,\n    #\n    show_row_names = FALSE,\n    show_column_names = TRUE,\n    column_labels = sample_ids[colnames(matrix_heatmap)],\n    column_names_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    #\n    top_annotation = ha_column,\n    bottom_annotation = NULL,\n    left_annotation = ha_left,\n    #\n    column_split = ha_group |>\n        tibble::enframe() |>\n        dplyr::mutate(\n            value = stringr::str_remove(\n                string = value, pattern = \"Fresh_\"\n            ),\n            value = case_when(\n                value == \"healthy\" ~ \"Healthy\",\n                TRUE ~ stringr::str_to_upper(value)\n            )\n        ) |>\n        dplyr::pull(value) |>\n        factor(\n            levels = c(\"Healthy\", \"ICM\", \"NICM\", \"HCM\")\n        ),\n    column_gap = grid::unit(0, \"mm\"),\n    #\n    show_heatmap_legend = TRUE,\n    heatmap_legend_param = list(\n        title = \"Z score\",\n        title_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 6\n        ),\n        legend_direction = \"vertical\",\n        labels_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        legend_height = grid::unit(12, \"mm\"),\n        legend_width = grid::unit(4, \"mm\")\n    ),\n    #\n    use_raster = RASTERISED\n)\n\n\n# legend\nlgd_group <- ComplexHeatmap::Legend(\n    title = \"Group\",\n    labels = ha_group |> unique(),\n    legend_gp = grid::gpar(\n        fill = setNames(\n            object = as.character(yarrr::piratepal(palette = \"google\")),\n            nm = names(samples) |>\n                stringr::str_remove(pattern = \"fresh_\") |>\n                stringr::str_to_title()\n        )\n    ),\n    labels_gp = grid::gpar(\n        fontfamily = \"Arial\",\n        fontsize = 6\n    ),\n    title_gp = grid::gpar(\n        fontfamily = \"Arial\",\n        fontsize = 6\n    )\n)\n\npd <- ComplexHeatmap::packLegend(\n    lgd_group,\n    direction = \"vertical\"\n)\n\n\n# draw\nComplexHeatmap::draw(\n    ht,\n    heatmap_legend_list = list(pd)\n)"
  },
  {
    "objectID": "cardiomyopathy.html#auc-multiple",
    "href": "cardiomyopathy.html#auc-multiple",
    "title": "Accurate Classification of Cardiomyopathy Diagnosis by Chromatin Accessibility",
    "section": "AUC; multiple",
    "text": "AUC; multiple\n\n\n\n76 M\n\nmatrix_rf_core_set <- matrix_cpm_use[\n    rownames(matrix_cpm_use) %in% features_selected,\n    unlist(samples)\n] |>\n    t() |>\n    as.matrix() |>\n    as.data.frame() |>\n    tibble::rownames_to_column(var = \"sample\") |>\n    dplyr::mutate(\n        group = case_when(\n            sample %in% samples_fresh_healthy ~ \"healthy\",\n            sample %in% samples_fresh_icm ~ \"icm\",\n            sample %in% samples_fresh_nicm ~ \"nicm\",\n            sample %in% samples_fresh_hcm ~ \"hcm\"\n        ),\n        group = factor(\n            group,\n            levels = c(\"healthy\", \"icm\", \"nicm\", \"hcm\")\n        )\n    )\n\nrownames(matrix_rf_core_set) <- matrix_rf_core_set$sample\nmatrix_rf_core_set$sample <- NULL\ncolnames(matrix_rf_core_set) <- make.names(\n    colnames(matrix_rf_core_set)\n)\n\n# sanity check\nstopifnot(\n    class(matrix_rf_core_set) == \"data.frame\"\n)\n\n\n\n\n\nroc_data <- purrr::map(seq_len(N_REPLICATES), \\(x) {\n    # roc_data <- furrr::future_map(seq_len(N_REPLICATES), \\(x) {\n    samples_test <- purrr::map(samples, \\(x) {\n        sample(\n            stringr::str_remove(\n                string = x,\n                pattern = \"_[1|2]\"\n            ) |> unique(),\n            N_SAMPLES_TEST\n        )\n    })\n\n    samples_test <- unlist(samples)[unlist(samples) |>\n        stringr::str_remove(\n            pattern = \"_[1|2]\"\n        ) %in% unlist(samples_test)]\n\n    matrix_rf_core_set_test <- matrix_rf_core_set[samples_test, ]\n    matrix_rf_core_set_train <- matrix_rf_core_set[\n        !rownames(matrix_rf_core_set) %in% samples_test,\n    ]\n\n    rf_model <- randomForest::randomForest(\n        group ~ .,\n        data = matrix_rf_core_set_train[\n            , !colnames(matrix_rf_core_set_train) %in% c(\"sample\"),\n        ],\n        ntree = 1000\n    )\n    rf_prediction <- predict(\n        rf_model,\n        matrix_rf_core_set_test,\n        type = \"prob\"\n    )\n\n    roc_rf <- pROC::multiclass.roc(\n        matrix_rf_core_set_test$group,\n        rf_prediction[, 2]\n    )\n\n    cat(\n        nrow(matrix_rf_core_set_test),\n        nrow(matrix_rf_core_set_train),\n        pROC::auc(roc_rf),\n        \"\\n\"\n    )\n\n    return(roc_rf)\n})\nnames(roc_data) <- seq_len(N_REPLICATES)\n\n\n\n\n\nroc_data <- format_roc(roc_data = roc_data)\nroc_averaged <- average_roc(roc_data = roc_data)\n\n20 M\n\nlibrary_size <- tibble::tribble(\n    ~sample, ~num_reads,\n    \"F1_1\", 60964390,\n    \"F1_2\", 57968864,\n    \"F2_1\", 54158970,\n    \"F2_2\", 143929746,\n    \"F5_1\", 55528072,\n    \"F5_2\", 64044782,\n    \"P3_1\", 78506662,\n    \"P3_2\", 80161416,\n    \"P5_1\", 100592008,\n    \"P5_2\", 99926658,\n    \"P6_1\", 74427936,\n    \"P6_2\", 74223738,\n    \"P104a_1\", 61766652,\n    \"P104a_2\", 71350414,\n    \"P117b_1\", 66442460,\n    \"P117b_2\", 76837402,\n    \"P123b_1\", 80766906,\n    \"P123b_2\", 82552378,\n    \"P131a_1\", 88475442,\n    \"P131a_2\", 68512592,\n    \"P92a_1\", 99683410,\n    \"P92a_2\", 74318972,\n    \"P114b_1\", 69490016,\n    \"P114b_2\", 74175524,\n    \"P59a_1\", 72517888,\n    \"P59a_2\", 75524788,\n    \"P60a_1\", 75844218,\n    \"P60a_2\", 77979036,\n    \"P73a_1\", 109707158,\n    \"P73a_2\", 81454894,\n    \"P87a_1\", 68502630,\n    \"P87a_2\", 52512570,\n    \"HOCM4_1\", 63494724,\n    \"HOCM4_2\", 64409436,\n    \"HOCM6_1\", 64873814,\n    \"HOCM6_2\", 80750200,\n    \"HOCM9_1\", 81728322,\n    \"HOCM9_2\", 74958418,\n    \"HOCM11_1\", 65222662,\n    \"HOCM11_2\", 77667354,\n    \"HOCM7_1\", 69229542,\n    \"HOCM7_2\", 80768964\n)\n\nlibrary_size <- setNames(\n    object = library_size$num_reads,\n    nm = library_size$sample\n)\n\n\nTARGET_NUM_READS <- 20000000\n\n\nroc_data <- purrr::map(seq_len(N_REPLICATES), \\(x) {\n    # roc_data <- furrr::future_map(seq_len(N_REPLICATES), \\(x) {\n    samples_test <- purrr::map(samples, \\(x) {\n        sample(\n            stringr::str_remove(\n                string = x,\n                pattern = \"_[1|2]\"\n            ) |> unique(),\n            N_SAMPLES_TEST\n        )\n    })\n\n    samples_test <- unlist(samples)[unlist(samples) |>\n        stringr::str_remove(\n            pattern = \"_[1|2]\"\n        ) %in% unlist(samples_test)]\n\n    matrix_rf_core_set_train <- matrix_rf_core_set[\n        !rownames(matrix_rf_core_set) %in% samples_test,\n    ]\n\n    matrix_cpm_test <- downsample_matrix(\n        matrix = matrix_readcount_use[, samples_test],\n        proportion = TARGET_NUM_READS / library_size[samples_test],\n        seed = SEED\n    ) |>\n        as.matrix() |>\n        calc_cpm()\n\n    matrix_rf_core_set_test <- matrix_cpm_test[\n        rownames(matrix_cpm_test) %in% features_selected,\n        unlist(samples_test)\n    ] |>\n        t() |>\n        as.matrix() |>\n        as.data.frame() |>\n        tibble::rownames_to_column(var = \"sample\") |>\n        dplyr::mutate(\n            group = case_when(\n                sample %in% samples_fresh_healthy ~ \"healthy\",\n                sample %in% samples_fresh_icm ~ \"icm\",\n                sample %in% samples_fresh_nicm ~ \"nicm\",\n                sample %in% samples_fresh_hcm ~ \"hcm\"\n            ),\n            group = factor(\n                group,\n                levels = c(\"healthy\", \"icm\", \"nicm\", \"hcm\")\n            )\n        )\n\n    rownames(matrix_rf_core_set_test) <- matrix_rf_core_set_test$sample\n    matrix_rf_core_set_test$sample <- NULL\n    colnames(matrix_rf_core_set_test) <- make.names(\n        colnames(matrix_rf_core_set_test)\n    )\n\n    class(matrix_rf_core_set_test)\n    matrix_rf_core_set_test[1:5, 1:5]\n\n    rf_model <- randomForest::randomForest(\n        group ~ .,\n        data = matrix_rf_core_set_train[\n            ,\n            !colnames(matrix_rf_core_set_train) %in% c(\"sample\"),\n        ],\n        ntree = 1000\n    )\n    rf_prediction <- predict(\n        rf_model,\n        matrix_rf_core_set_test,\n        type = \"prob\"\n    )\n\n    roc_rf <- pROC::multiclass.roc(\n        matrix_rf_core_set_test$group, rf_prediction[, 2]\n    )\n\n    cat(\n        nrow(matrix_rf_core_set_test),\n        nrow(matrix_rf_core_set_train),\n        pROC::auc(roc_rf),\n        \"\\n\"\n    )\n\n    return(roc_rf)\n})\nnames(roc_data) <- seq_len(N_REPLICATES)\n\n\n\n\n\nroc_data <- format_roc(roc_data = roc_data)\nroc_averaged_downsampled <- average_roc(roc_data = roc_data)\n\n\n\n\n\nplot_roc_curve_two(\n    data = list(roc_averaged, roc_averaged_downsampled),\n    label = c(\"76 M\", \"20 M\")\n)"
  },
  {
    "objectID": "cardiomyopathy.html#construct-model",
    "href": "cardiomyopathy.html#construct-model",
    "title": "Accurate Classification of Cardiomyopathy Diagnosis by Chromatin Accessibility",
    "section": "Construct model",
    "text": "Construct model\n\n\n\nBuild\n\nmatrix_rf_train <- matrix_cpm_use[\n    rownames(matrix_cpm_use) %in% features_selected,\n    c(\n        samples_fresh_healthy,\n        samples_fresh_icm,\n        samples_fresh_nicm,\n        samples_fresh_hcm\n    )\n]\n\nmatrix_rf_train <- matrix_rf_train |>\n    t() |>\n    as.matrix() |>\n    as.data.frame() |>\n    tibble::rownames_to_column(var = \"sample\") |>\n    dplyr::mutate(\n        group = case_when(\n            sample %in% samples_fresh_healthy ~ \"healthy\",\n            sample %in% samples_fresh_icm ~ \"icm\",\n            sample %in% samples_fresh_nicm ~ \"nicm\",\n            sample %in% samples_fresh_hcm ~ \"hcm\"\n        ),\n        group = factor(\n            group,\n            levels = c(\"healthy\", \"icm\", \"nicm\", \"hcm\")\n        )\n    )\n\nrownames(matrix_rf_train) <- matrix_rf_train$sample\nmatrix_rf_train$sample <- NULL\ncolnames(matrix_rf_train) <- make.names(colnames(matrix_rf_train))\n\n# sanity check\nstopifnot(\n    class(matrix_rf_train) == \"data.frame\"\n)\n\n\nset.seed(seed = SEED)\nrf_model <- randomForest::randomForest(\n    group ~ .,\n    data = matrix_rf_train[\n        ,\n        !colnames(matrix_rf_train) %in% c(\"sample\"),\n    ],\n    ntree = 1000\n)\n\nPredict\n\nsamples_selected <- tibble::tribble(\n    ~sample, ~ratio,\n    \"P97a_1\", 0.3677451197,\n    \"P97a_2\", 0.396041047,\n    \"P141a_1\", 0.208162124,\n    \"P141a_2\", 0.312910588,\n    \"MYEC4_2\", 0.320481892,\n    \"P108b_1\", 0.239929499,\n    \"P108b_2\", 0.321824834\n)\n\nmatrix_readcount_p1 <- matrix_readcount_use[\n    ,\n    c(\"F1_1\", \"P92a_1\", \"P59a_1\", \"HOCM4_1\")\n]\n\nmatrix_readcount_p2 <- purrr::map(\n    seq_len(nrow(samples_selected)), \\(x) {\n        downsample_matrix(\n            matrix_readcount_use[\n                , samples_selected[x, \"sample\", drop = TRUE],\n                drop = FALSE\n            ],\n            proportion = c(samples_selected[x, \"ratio\", drop = TRUE])\n        )\n    }\n) |>\n    purrr::reduce(cbind)\n\nmatrix_rf_test <- calc_cpm(\n    cbind(\n        matrix_readcount_p1,\n        matrix_readcount_p2\n    )\n)[\n    rownames(matrix_readcount_use) %in% features_selected,\n]\n\nmatrix_rf_test <- matrix_rf_test |>\n    t() |>\n    as.matrix() |>\n    as.data.frame() |>\n    tibble::rownames_to_column(var = \"sample\")\n\nrownames(matrix_rf_test) <- matrix_rf_test$sample\nmatrix_rf_test$sample <- NULL\ncolnames(matrix_rf_test) <- make.names(colnames(matrix_rf_test))\n\nrf_prediction <- predict(rf_model, matrix_rf_test, type = \"prob\")\n\nVisualize\nHeatmap\n\n\n\n\n# horizontal\nht <- ComplexHeatmap::Heatmap(\n    matrix = matrix_heatmap |> as.matrix() |> t(),\n    col = wesanderson::wes_palette(\"Zissou1\", 50, type = \"continuous\"),\n    #\n    cluster_rows = FALSE,\n    show_row_dend = FALSE,\n    cluster_columns = FALSE,\n    show_column_dend = FALSE,\n    #\n    show_row_names = TRUE,\n    row_labels = colnames(matrix_heatmap),\n    row_names_side = c(\"left\"),\n    row_names_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    #\n    show_column_names = TRUE,\n    column_names_side = c(\"bottom\"),\n    column_names_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    column_names_rot = 90,\n    #\n    show_heatmap_legend = TRUE,\n    heatmap_legend_param = list(\n        title = \"Score\",\n        title_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 6\n        ),\n        legend_direction = \"vertical\",\n        labels_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        legend_height = grid::unit(12.5, \"mm\"),\n        legend_width = grid::unit(1, \"mm\")\n    ),\n)\n\n\n# draw\nComplexHeatmap::draw(ht)\n\n\n\n\n\n\n\n\n\n\nRadar plot\n\n\n\n\n\n\n\npurrr::map(rownames(matrix_heatmap), \\(x) {\n    data <- matrix_heatmap[\n        x, c(\"HCM     \", \"Healthy\", \"     ICM\", \"NICM\"),\n        drop = FALSE\n    ]\n    data <- data * 100\n\n    plot_radar(data)\n}) |>\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 3)"
  },
  {
    "objectID": "matrix.html#functions",
    "href": "matrix.html#functions",
    "title": "Genome-Wide Chromatin Accessibility Matrix",
    "section": "Functions",
    "text": "Functions\n\n\n\nLoad required packages.\n\nlibrary(tidyverse)\n## ── Attaching packages ────────────────────────────────── tidyverse 1.3.2.9000 ──\n## ✔ ggplot2   3.3.6.9000        ✔ dplyr     1.0.99.9000  \n## ✔ tibble    3.1.8.9001        ✔ stringr   1.4.1.9000   \n## ✔ tidyr     1.2.1.9000        ✔ forcats   0.5.2.9000   \n## ✔ readr     2.1.2.9000        ✔ lubridate 1.8.0.9000   \n## ✔ purrr     0.9000.0.9000     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\nlibrary(Matrix)\n## \n## Attaching package: 'Matrix'\n## \n## The following objects are masked from 'package:tidyr':\n## \n##     expand, pack, unpack\nlibrary(patchwork)\nlibrary(extrafont)\n## Registering fonts with R\n\n\nsource(\n    file = file.path(\n        SCRIPT_DIR,\n        \"utilities.R\"\n    )\n)\n\n\n`%+replace%` <- ggplot2::`%+replace%`"
  },
  {
    "objectID": "matrix.html#python-env",
    "href": "matrix.html#python-env",
    "title": "Genome-Wide Chromatin Accessibility Matrix",
    "section": "Python env",
    "text": "Python env\n\nnp <- reticulate::import(\"numpy\", convert = TRUE)\ncat(\"numpy version:\", np$`__version__`, \"\\n\")\n\nnumpy version: 1.22.4 \n\n\n\nreticulate::py_config()\n\npython:         /Users/jialei/.pyenv/shims/python\nlibpython:      /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/libpython3.9.dylib\npythonhome:     /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10:/Users/jialei/.pyenv/versions/mambaforge-4.10.3-10\nversion:        3.9.13 | packaged by conda-forge | (main, May 27 2022, 17:00:33)  [Clang 13.0.1 ]\nnumpy:          /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/python3.9/site-packages/numpy\nnumpy_version:  1.22.4\nnumpy:          /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/python3.9/site-packages/numpy\n\nNOTE: Python version was forced by RETICULATE_PYTHON"
  },
  {
    "objectID": "matrix.html#matrix",
    "href": "matrix.html#matrix",
    "title": "Genome-Wide Chromatin Accessibility Matrix",
    "section": "Matrix",
    "text": "Matrix\n\n\n\n\n# load matrix\nfeature_counts_files <- list.files(\n    path = file.path(PROJECT_DIR, \"defined_peaks/summarize_counts\")\n)\n\nfeature_counts_files <- feature_counts_files[\n    stringr::str_detect(feature_counts_files, pattern = \"merged.+.bz2\")\n]\n\nmatrix_readcount_use <- purrr::map(feature_counts_files, \\(x) {\n    dt <- data.table::fread(\n        file = file.path(PROJECT_DIR, \"defined_peaks/summarize_counts\", x)\n    )\n\n    features <- dt[[\"Geneid\"]]\n    dt <- dt[, .SD, .SDcols = patterns(\"/project\")]\n    colnames(dt) <- stringr::str_remove(\n        string = colnames(dt),\n        pattern = \"_atacseq/alignments/Aligned_sorted_deduped_q10.bam\"\n    ) |>\n        stringr::str_remove(pattern = \"^.+/\")\n\n    m <- as.matrix(dt, sparse = TRUE)\n    rownames(m) <- features\n\n    return(m)\n})\n\nmatrix_readcount_use <- purrr::reduce(matrix_readcount_use, cbind)\ndim(matrix_readcount_use)\n\n[1] 207021     87\n\n\n\n# rename samples\nsample_ids <- tibble::tribble(\n    ~old, ~new,\n    \"heart_fresh1_1\", \"F1_1\",\n    \"heart_fresh1_2\", \"F1_2\",\n    \"heart_fresh2_1\", \"F2_1\",\n    \"heart_fresh2_2\", \"F2_2\",\n    \"heart_fresh5_1\", \"F5_1\",\n    \"heart_fresh5_2\", \"F5_2\",\n    \"heart_myectomy_p11_1\", \"HOCM11_1\",\n    \"heart_myectomy_p11_2\", \"HOCM11_2\",\n    \"heart_myectomy_p7_1\", \"HOCM7_1\",\n    \"heart_myectomy_p7_2\", \"HOCM7_2\",\n    #\n    \"heart_myectomy_p4_2\", \"MYEC4_2\"\n)\n\ncolnames(matrix_readcount_use) <- colnames(matrix_readcount_use) |>\n    tibble::enframe(value = \"sample\") |>\n    dplyr::left_join(sample_ids, by = c(\"sample\" = \"old\")) |>\n    dplyr::mutate(\n        new = case_when(\n            is.na(new) ~ sample,\n            TRUE ~ new\n        ),\n        new = stringr::str_remove(string = new, pattern = \"heart_\"),\n        #\n        new = case_when(\n            stringr::str_detect(\n                string = new,\n                pattern = \"[hocm|Hocm|MYEC]\"\n            ) ~ stringr::str_to_upper(new),\n            TRUE ~ stringr::str_to_title(new)\n        )\n    ) |>\n    dplyr::pull(new)\n\n\n# inspect matrix\nmatrix_readcount_use[1:5, 1:8]\n\n                F1_1 F1_2 F2_1 F2_2 F5_1 F5_2 P3_1 P3_2\n1_181358_181567    4    3    5   14   10   11    8    1\n1_183716_183885    4    4    6    9    2    7    3    5\n1_183999_184321    3    3    9   15    2   11    5   10\n1_191239_191880   19   17   24   28   14   28    9   10\n1_267894_268128    5    2   10   21    8   14    2    8\n\n\n\n\n\n\n# filter blocked regions\nblocked_regions <- read.table(\n    file = file.path(\n        dirname(PROJECT_DIR),\n        \"misc/annotations\",\n        \"ENCFF419RSJ.bed.gz\"\n    ),\n    stringsAsFactors = FALSE\n)\n\nblocked_regions <- GenomicRanges::GRanges(\n    blocked_regions[, 1],\n    IRanges::IRanges(blocked_regions[, 2] + 1, blocked_regions[, 3])\n)\n\nif (ensembldb::seqlevelsStyle(blocked_regions) == \"UCSC\") {\n    ensembldb::seqlevelsStyle(blocked_regions) <- \"Ensembl\"\n}\n\npeak_regions <- stringr::str_split(\n    string = rownames(matrix_readcount_use),\n    pattern = \"_\", simplify = TRUE\n) |>\n    as.data.frame()\npeak_regions <- GenomicRanges::GRanges(\n    peak_regions[, 1],\n    IRanges::IRanges(\n        as.numeric(peak_regions[, 2]) + 1,\n        as.numeric(peak_regions[, 3])\n    )\n)\n\nidy1 <- S4Vectors::queryHits(\n    GenomicRanges::findOverlaps(peak_regions, blocked_regions)\n)\n\nidy2 <- grep(\"Y|MT|GL|KI\", peak_regions)\nidy <- unique(c(idy1, idy2))\n\nmatrix_readcount_use <- matrix_readcount_use[-idy, ]\ndim(matrix_readcount_use)\n\n[1] 206024     87\n\n\n\n# sanity check\nstopifnot(\n    dim(matrix_readcount_use) == c(206024, 87)\n)\n\n\n# check memory usage\nwalk(list(matrix_readcount_use), \\(x) {\n    print(object.size(x), units = \"auto\", standard = \"SI\")\n})\n\n89.8 MB"
  },
  {
    "objectID": "dataset.html",
    "href": "dataset.html",
    "title": "Dataset Summary",
    "section": "",
    "text": "Table\nData\n\n\n\n\nCodedataset |>\n    dplyr::group_by(category) |>\n    dplyr::mutate(\n        num_reads_uniq_percentage = num_reads_uniq / num_reads_trimmed,\n        num_reads_uniq_percentage_all = num_reads_uniq / num_reads_raw,\n        #\n        num_reads_deduped_percentage = num_reads_deduped / num_reads_uniq,\n        num_reads_deduped_percentage_all = num_reads_deduped / num_reads_raw,\n        #\n        num_reads_q10_percentage = num_reads_q10 / num_reads_deduped,\n        num_reads_q10_percentage_all = num_reads_q10 / num_reads_raw,\n    ) |>\n    dplyr::summarise(\n        # num_samples = dplyr::n(),\n        median_reads = median(num_reads_raw),\n        median_reads_trimmed = median(num_reads_trimmed),\n        #\n        median_reads_uniq = median(num_reads_uniq),\n        median_reads_uniq_percentage = median(num_reads_uniq_percentage),\n        median_reads_uniq_percentage_all = median(\n            num_reads_uniq_percentage_all\n        ),\n        #\n        median_reads_deduped = median(num_reads_deduped),\n        median_reads_deduped_percentage = median(num_reads_deduped_percentage),\n        median_reads_deduped_percentage_all = median(\n            num_reads_deduped_percentage_all\n        ),\n        #\n        median_reads_q10 = median(num_reads_q10),\n        median_reads_q10_percentage = median(num_reads_q10_percentage),\n        median_reads_q10_percentage_all = median(\n            num_reads_q10_percentage_all\n        ),\n    ) |>\n    dplyr::mutate(\n        category = factor(\n            category,\n            levels = c(\"Healthy\", \"ICM\", \"NICM\", \"HCM\")\n        )\n    ) |>\n    dplyr::arrange(category) |>\n    gt::gt() |>\n    gt::tab_header(\n        title = gt::md(\"**Dataset Summary**\")\n    ) |>\n    gt::tab_spanner(\n        label = \"No. reads\",\n        columns = c(median_reads, median_reads_trimmed)\n    ) |>\n    gt::tab_spanner(\n        label = \"Unique alignment\",\n        columns = c(\n            median_reads_uniq,\n            median_reads_uniq_percentage,\n            median_reads_uniq_percentage_all\n        )\n    ) |>\n    gt::tab_spanner(\n        label = \"Q10\",\n        columns = c(\n            median_reads_q10,\n            median_reads_q10_percentage,\n            median_reads_q10_percentage_all\n        )\n    ) |>\n    gt::tab_spanner(\n        label = \"Duplicate removal\",\n        columns = median_reads_deduped:median_reads_deduped_percentage_all\n    ) |>\n    gt::tab_footnote(\n        footnote = gt::md(\"Median of each group\"),\n        locations = gt::cells_column_spanners(\n            spanners = c(\n                \"No. reads\",\n                \"Unique alignment\",\n                \"Duplicate removal\",\n                \"Q10\"\n            )\n        )\n    ) |>\n    gt::tab_footnote(\n        footnote = gt::md(\"Percentage of `Trimmed` reads\"),\n        locations = gt::cells_column_labels(\n            columns = median_reads_uniq_percentage\n        )\n    ) |>\n    gt::tab_footnote(\n        footnote = gt::md(\"Percentage of total `Raw` reads\"),\n        locations = gt::cells_column_labels(\n            columns = median_reads_uniq_percentage_all\n        )\n    ) |>\n    gt::tab_footnote(\n        footnote = gt::md(\"Percentage of `Unique alignment` reads\"),\n        locations = gt::cells_column_labels(\n            columns = median_reads_deduped_percentage\n        )\n    ) |>\n    gt::tab_footnote(\n        footnote = gt::md(\"Percentage of total `Raw` reads\"),\n        locations = gt::cells_column_labels(\n            columns = median_reads_deduped_percentage_all\n        )\n    ) |>\n    gt::tab_footnote(\n        footnote = gt::md(\n            \"Percentage of `Duplicate removal` reads\"\n        ),\n        locations = gt::cells_column_labels(\n            columns = median_reads_q10_percentage\n        )\n    ) |>\n    gt::tab_footnote(\n        footnote = gt::md(\"Percentage of total `Raw` reads\"),\n        locations = gt::cells_column_labels(\n            columns = median_reads_q10_percentage_all\n        )\n    ) |>\n    gt::fmt_number(\n        columns = c(\n            median_reads:median_reads_uniq,\n            median_reads_deduped,\n            median_reads_q10\n        ),\n        decimals = 2,\n        suffixing = TRUE\n    ) |>\n    gt::fmt_percent(\n        columns = c(\n            median_reads_uniq_percentage:median_reads_uniq_percentage_all,\n            median_reads_deduped_percentage:median_reads_deduped_percentage_all,\n            median_reads_q10_percentage:median_reads_q10_percentage_all\n        ),\n        decimals = 1\n    ) |>\n    gt::data_color(\n        columns = c(category),\n        colors = scales::col_factor(\n            palette = yarrr::piratepal(palette = \"google\") |> as.character(),\n            domain = NULL\n        )\n    ) |>\n    gt::cols_label(\n        category = \"\",\n        #\n        median_reads = \"Raw\",\n        median_reads_trimmed = \"Trimmed\",\n        #\n        median_reads_uniq = gt::html(\"#\"),\n        median_reads_uniq_percentage = gt::html(\"%\"),\n        median_reads_uniq_percentage_all = gt::html(\"%\"),\n        #\n        median_reads_deduped = gt::html(\"#\"),\n        median_reads_deduped_percentage = gt::html(\"%\"),\n        median_reads_deduped_percentage_all = gt::html(\"%\"),\n        #\n        median_reads_q10 = gt::html(\"#\"),\n        median_reads_q10_percentage = gt::html(\"%\"),\n        median_reads_q10_percentage_all = gt::html(\"%\"),\n    ) |>\n    gt::opt_footnote_marks(marks = \"extended\") |>\n    gt::tab_options()\n\n\n\n\n\n\nDataset Summary\n    \n\n\n\n      \n        No. reads*\n      \n      \n        Unique alignment*\n      \n      \n        Duplicate removal*\n      \n      \n        Q10*\n      \n    \n\nRaw\n      Trimmed\n      #\n      %†\n\n      %‡\n\n      #\n      %§\n\n      %‡\n\n      #\n      %‖\n\n      %‡\n\n    \n\n\n\nHealthy\n74.33M\n74.19M\n73.37M\n98.7%\n98.6%\n48.12M\n67.8%\n66.9%\n43.51M\n90.9%\n60.5%\n\n\nICM\n75.58M\n75.45M\n74.25M\n98.7%\n98.6%\n44.91M\n54.2%\n53.4%\n40.67M\n90.6%\n48.2%\n\n\nNICM\n74.85M\n74.71M\n73.32M\n98.4%\n98.3%\n45.81M\n62.8%\n61.6%\n41.42M\n90.4%\n55.6%\n\n\nHCM\n72.09M\n71.96M\n71.01M\n98.8%\n98.6%\n51.36M\n75.1%\n74.0%\n46.50M\n90.4%\n66.9%\n\n\n\n\n\n* Median of each group\n    \n\n\n† Percentage of Trimmed reads\n    \n\n\n‡ Percentage of total Raw reads\n    \n\n\n§ Percentage of Unique alignment reads\n    \n\n\n‖ Percentage of Duplicate removal reads\n    \n\n\n\n\n\n\n\n\n\n\n\nCodedataset |>\n    dplyr::select(sample, category, num_reads_raw, num_reads_q10) |>\n    dplyr::mutate(\n        ratio = num_reads_q10 / num_reads_raw,\n        category = factor(\n            category,\n            levels = c(\"Healthy\", \"ICM\", \"NICM\", \"HCM\")\n        )\n    ) |>\n    gt::gt() |>\n    gt::summary_rows(\n        columns = num_reads_raw:num_reads_q10,\n        fns = c(\n            Average = ~ mean(.)\n        ),\n        formatter = gt::fmt_number,\n        decimals = 2,\n        suffixing = TRUE\n    ) |>\n    gt::summary_rows(\n        columns = ratio,\n        fns = c(\n            Average = ~ mean(.)\n        ),\n        formatter = gt::fmt_percent,\n        decimals = 2\n    ) |>\n    gt::tab_spanner(\n        label = \"No. reads\",\n        columns = c(num_reads_raw, num_reads_q10)\n    ) |>\n    gt::tab_header(\n        title = gt::md(\"**Sample Overview**\")\n    ) |>\n    gt::data_color(\n        columns = c(category),\n        colors = scales::col_factor(\n            palette = yarrr::piratepal(palette = \"google\") |> as.character(),\n            domain = NULL\n        )\n    ) |>\n    gt::data_color(\n        columns = c(num_reads_raw),\n        colors = scales::col_numeric(\n            palette = c(\n                \"green\", \"orange\", \"red\"\n            ),\n            domain = NULL\n        )\n    ) |>\n    gt::data_color(\n        columns = c(ratio),\n        colors = scales::col_numeric(\n            palette = viridis::viridis(n = 5, option = \"F\"),\n            domain = NULL\n        )\n    ) |>\n    gt::fmt_number(\n        columns = c(num_reads_raw, num_reads_q10),\n        decimals = 2,\n        suffixing = TRUE\n    ) |>\n    gt::fmt_percent(\n        columns = c(ratio),\n        decimals = 1\n    ) |>\n    gt::cols_label(\n        sample = gt::md(\"**Sample**\"),\n        category = gt::md(\"Category\"),\n        num_reads_raw = gt::md(\"Raw\"),\n        num_reads_q10 = gt::md(\"Q10\"),\n        ratio = gt::md(\"Percentage\")\n    ) |>\n    gt::tab_options(\n        # table.background.color = gt::adjust_luminance(\"LemonChiffon\", steps = 2),\n        table.background.color = gt::adjust_luminance(\"#FFEFE5\", steps = 2),\n        grand_summary_row.background.color = \"lightblue\"\n    )\n\n\n\n\n\n\nSample Overview\n    \n\n\n\n      Sample\n      Category\n      \n        No. reads\n      \n      Percentage\n    \n\nRaw\n      Q10\n    \n\n\n\n\nF1_1\nHealthy\n60.96M\n39.41M\n64.6%\n\n\n\nF1_2\nHealthy\n57.97M\n39.01M\n67.3%\n\n\n\nF2_1\nHealthy\n54.16M\n36.17M\n66.8%\n\n\n\nF2_2\nHealthy\n143.93M\n80.99M\n56.3%\n\n\n\nF5_1\nHealthy\n55.53M\n37.15M\n66.9%\n\n\n\nF5_2\nHealthy\n64.04M\n46.27M\n72.2%\n\n\n\nP3_1\nHealthy\n78.51M\n43.62M\n55.6%\n\n\n\nP3_2\nHealthy\n80.16M\n42.48M\n53.0%\n\n\n\nP5_1\nHealthy\n100.59M\n44.28M\n44.0%\n\n\n\nP5_2\nHealthy\n99.93M\n43.40M\n43.4%\n\n\n\nP6_1\nHealthy\n74.43M\n45.71M\n61.4%\n\n\n\nP6_2\nHealthy\n74.22M\n44.25M\n59.6%\n\n\n\nP104a_1\nICM\n61.77M\n30.83M\n49.9%\n\n\n\nP104a_2\nICM\n71.35M\n32.92M\n46.1%\n\n\n\nP117b_1\nICM\n66.44M\n41.34M\n62.2%\n\n\n\nP117b_2\nICM\n76.84M\n46.66M\n60.7%\n\n\n\nP123b_1\nICM\n80.77M\n52.35M\n64.8%\n\n\n\nP123b_2\nICM\n82.55M\n54.31M\n65.8%\n\n\n\nP131a_1\nICM\n88.48M\n39.99M\n45.2%\n\n\n\nP131a_2\nICM\n68.51M\n29.84M\n43.6%\n\n\n\nP92a_1\nICM\n99.68M\n45.23M\n45.4%\n\n\n\nP92a_2\nICM\n74.32M\n34.56M\n46.5%\n\n\n\nP114b_1\nNICM\n69.49M\n37.01M\n53.3%\n\n\n\nP114b_2\nNICM\n74.18M\n39.39M\n53.1%\n\n\n\nP59a_1\nNICM\n72.52M\n47.01M\n64.8%\n\n\n\nP59a_2\nNICM\n75.52M\n53.73M\n71.1%\n\n\n\nP60a_1\nNICM\n75.84M\n40.87M\n53.9%\n\n\n\nP60a_2\nNICM\n77.98M\n40.17M\n51.5%\n\n\n\nP73a_1\nNICM\n109.71M\n57.57M\n52.5%\n\n\n\nP73a_2\nNICM\n81.45M\n46.64M\n57.3%\n\n\n\nP87a_1\nNICM\n68.50M\n41.96M\n61.3%\n\n\n\nP87a_2\nNICM\n52.51M\n30.55M\n58.2%\n\n\n\nHOCM4_1\nHCM\n63.49M\n44.04M\n69.4%\n\n\n\nHOCM4_2\nHCM\n64.41M\n43.67M\n67.8%\n\n\n\nHOCM6_1\nHCM\n64.87M\n37.19M\n57.3%\n\n\n\nHOCM6_2\nHCM\n80.75M\n47.82M\n59.2%\n\n\n\nHOCM9_1\nHCM\n81.73M\n60.28M\n73.8%\n\n\n\nHOCM9_2\nHCM\n74.96M\n49.82M\n66.5%\n\n\n\nHOCM11_1\nHCM\n65.22M\n45.17M\n69.3%\n\n\n\nHOCM11_2\nHCM\n77.67M\n52.24M\n67.3%\n\n\n\nHOCM7_1\nHCM\n69.23M\n42.03M\n60.7%\n\n\n\nHOCM7_2\nHCM\n80.77M\n48.10M\n59.6%\n\n\nAverage\n—\n—\n76.09M\n44.19M\n58.79%"
  },
  {
    "objectID": "index.html#workflow",
    "href": "index.html#workflow",
    "title": "Accurate Classification of Cardiomyopathy Diagnosis by Chromatin Accessibility",
    "section": "Workflow",
    "text": "Workflow\n\nRapid diagnostic strategy for cardiomyopathy etiology"
  },
  {
    "objectID": "index.html#citation",
    "href": "index.html#citation",
    "title": "Accurate Classification of Cardiomyopathy Diagnosis by Chromatin Accessibility",
    "section": "Citation",
    "text": "Citation\nSamadrita Bhattacharyya#, Jialei Duan#, Ryan J. Vela, Minoti Bhakta, Pietro Bajona, Pradeep P.A. Mammen, Gary C. Hon* and Nikhil V. Munshi* (2022). Accurate Classification of Cardiomyopathy Diagnosis by Chromatin Accessibility. Circulation 146, 878–881. DOI: https://doi.org/10.1161/CIRCULATIONAHA.122.059659"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "from datetime import datetime\ndatetime.today().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n'2022-09-19 18:39:51'"
  },
  {
    "objectID": "qc.html#functions",
    "href": "qc.html#functions",
    "title": "Quality Control",
    "section": "Functions",
    "text": "Functions\n\n\n\nLoad required packages.\n\nlibrary(tidyverse)\n## ── Attaching packages ────────────────────────────────── tidyverse 1.3.2.9000 ──\n## ✔ ggplot2   3.3.6.9000        ✔ dplyr     1.0.99.9000  \n## ✔ tibble    3.1.8.9001        ✔ stringr   1.4.1.9000   \n## ✔ tidyr     1.2.1.9000        ✔ forcats   0.5.2.9000   \n## ✔ readr     2.1.2.9000        ✔ lubridate 1.8.0.9000   \n## ✔ purrr     0.9000.0.9000     \n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\nlibrary(Matrix)\n## \n## Attaching package: 'Matrix'\n## \n## The following objects are masked from 'package:tidyr':\n## \n##     expand, pack, unpack\nlibrary(patchwork)\nlibrary(extrafont)\n## Registering fonts with R\n\n\nsource(\n    file = file.path(\n        SCRIPT_DIR,\n        \"utilities.R\"\n    )\n)\n\n\n`%+replace%` <- ggplot2::`%+replace%`"
  },
  {
    "objectID": "qc.html#python-env",
    "href": "qc.html#python-env",
    "title": "Quality Control",
    "section": "Python env",
    "text": "Python env\n\nnp <- reticulate::import(\"numpy\", convert = TRUE)\ncat(\"numpy version:\", np$`__version__`, \"\\n\")\n\nnumpy version: 1.22.4 \n\n\n\nreticulate::py_config()\n\npython:         /Users/jialei/.pyenv/shims/python\nlibpython:      /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/libpython3.9.dylib\npythonhome:     /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10:/Users/jialei/.pyenv/versions/mambaforge-4.10.3-10\nversion:        3.9.13 | packaged by conda-forge | (main, May 27 2022, 17:00:33)  [Clang 13.0.1 ]\nnumpy:          /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/python3.9/site-packages/numpy\nnumpy_version:  1.22.4\nnumpy:          /Users/jialei/.pyenv/versions/mambaforge-4.10.3-10/lib/python3.9/site-packages/numpy\n\nNOTE: Python version was forced by RETICULATE_PYTHON"
  },
  {
    "objectID": "qc.html#tss-enrichment-score",
    "href": "qc.html#tss-enrichment-score",
    "title": "Quality Control",
    "section": "TSS enrichment score",
    "text": "TSS enrichment score\n\n\nPlot\nData\n\n\n\n\nCodefs::dir_ls(\n    path = file.path(\n        PROJECT_DIR,\n        \"qc\",\n        \"tss_enrichment/raw/core_set_merged\",\n        \"cut_site\"\n    ),\n    regexp = \"npy$\"\n) |>\n    purrr::map(\\(x) {\n        np$load(file = x) |>\n            {\n                \\(y) {\n                    y / mean(c(y[1:100], y[4102:4201]))\n                }\n            }() |>\n            tibble::enframe(name = \"position\", value = \"score\") |>\n            dplyr::mutate(\n                category = x |>\n                    basename() |>\n                    stringr::str_remove(\n                        pattern = \"Aligned_sorted_deduped_q10_\"\n                    ) |>\n                    stringr::str_remove(\n                        pattern = \"_21_tss_flanking_0.npy\"\n                    )\n            )\n    }) |>\n    dplyr::bind_rows() |>\n    dplyr::mutate(\n        category = category |> stringr::str_to_title(),\n        category = dplyr::case_when(\n            category == \"Fresh_healthy\" ~ \"Healthy\",\n            category == \"Fresh_icm\" ~ \"ICM\",\n            category == \"Fresh_nicm\" ~ \"NICM\",\n            category == \"Fresh_hcm\" ~ \"HCM\"\n        ),\n        category = factor(\n            category,\n            levels = c(\"Healthy\", \"ICM\", \"NICM\", \"HCM\")\n        )\n    ) |>\n    ggplot2::ggplot(\n        ggplot2::aes(\n            x = position,\n            y = score,\n            color = category\n        )\n    ) +\n    ggplot2::geom_line(size = 0.5) +\n    ggplot2::scale_x_continuous(\n        name = \"Distance from TSS (bp)\",\n        breaks = c(101, 1101, 2101, 3101, 4100),\n        labels = seq(-2000, 2000, 1000)\n    ) +\n    ggplot2::scale_y_continuous(\n        name = \"Normalized cut sites\"\n    ) +\n    ggplot2::scale_color_manual(\n        name = NULL,\n        values = as.character(yarrr::piratepal(palette = \"google\"))\n    ) +\n    ggplot2::ggtitle(label = \"TSS enrichment score\") +\n    ggplot2::theme_linedraw(base_size = 6, base_family = \"Arial\") +\n    ggplot2::theme(\n        legend.background = ggplot2::element_blank(),\n        legend.margin = ggplot2::margin(\n            t = 0, r = 0, b = 0, l = 0, unit = \"mm\"\n        ),\n        legend.spacing.y = grid::unit(0, \"mm\"),\n        legend.key = ggplot2::element_blank(),\n        legend.key.size = grid::unit(3, \"mm\"),\n        legend.text = ggplot2::element_text(\n            family = \"Arial\",\n            size = 5,\n            margin = ggplot2::margin(\n                t = 0, r = 0, b = 0, l = -1, unit = \"mm\"\n            )\n        ),\n        legend.position = c(0.7, 0.9),\n        legend.justification = c(0, 1),\n        plot.title = ggplot2::element_text(\n            family = \"Arial\", size = 6, hjust = 0.5\n        ),\n        plot.background = ggplot2::element_blank()\n    )\n\n\n\n\n\n\n\n\n\nList files.\n\nfs::dir_ls(\n    path = file.path(\n        PROJECT_DIR,\n        \"qc\",\n        \"tss_enrichment/raw/core_set_merged\",\n        \"cut_site\"\n    ),\n    regexp = \"npy$\"\n)\n\n/Users/jialei/Dropbox/Data/Projects/UTSW/Cardiomyopathy/atac-seq/qc/tss_enrichment/raw/core_set_merged/cut_site/Aligned_sorted_deduped_q10_fresh_hcm_21_tss_flanking_0.npy\n/Users/jialei/Dropbox/Data/Projects/UTSW/Cardiomyopathy/atac-seq/qc/tss_enrichment/raw/core_set_merged/cut_site/Aligned_sorted_deduped_q10_fresh_healthy_21_tss_flanking_0.npy\n/Users/jialei/Dropbox/Data/Projects/UTSW/Cardiomyopathy/atac-seq/qc/tss_enrichment/raw/core_set_merged/cut_site/Aligned_sorted_deduped_q10_fresh_icm_21_tss_flanking_0.npy\n/Users/jialei/Dropbox/Data/Projects/UTSW/Cardiomyopathy/atac-seq/qc/tss_enrichment/raw/core_set_merged/cut_site/Aligned_sorted_deduped_q10_fresh_nicm_21_tss_flanking_0.npy\n\n\nInspect data.\n\nfs::dir_ls(\n    path = file.path(\n        PROJECT_DIR,\n        \"qc\",\n        \"tss_enrichment/raw/core_set_merged\",\n        \"cut_site\"\n    ),\n    regexp = \"npy$\"\n) |>\n    purrr::map(\\(x) {\n        np$load(file = x) |>\n            {\n                \\(y) {\n                    y / mean(c(y[1:100], y[4102:4201]))\n                }\n            }() |>\n            tibble::enframe(name = \"position\", value = \"score\") |>\n            dplyr::mutate(\n                category = x |>\n                    basename() |>\n                    stringr::str_remove(\n                        pattern = \"Aligned_sorted_deduped_q10_\"\n                    ) |>\n                    stringr::str_remove(\n                        pattern = \"_21_tss_flanking_0.npy\"\n                    )\n            )\n    }) |>\n    dplyr::bind_rows() |>\n    dplyr::mutate(\n        category = category |> stringr::str_to_title(),\n        category = dplyr::case_when(\n            category == \"Fresh_healthy\" ~ \"Healthy\",\n            category == \"Fresh_icm\" ~ \"ICM\",\n            category == \"Fresh_nicm\" ~ \"NICM\",\n            category == \"Fresh_hcm\" ~ \"HCM\"\n        ),\n        category = factor(\n            category,\n            levels = c(\"Healthy\", \"ICM\", \"NICM\", \"HCM\")\n        )\n    ) |>\n    head(n = 12)\n\n# A tibble: 12 × 3\n   position     score category\n      <int> <dbl[1d]> <fct>   \n 1        1     0.648 HCM     \n 2        2     0.657 HCM     \n 3        3     0.664 HCM     \n 4        4     0.678 HCM     \n 5        5     0.681 HCM     \n 6        6     0.690 HCM     \n 7        7     0.699 HCM     \n 8        8     0.708 HCM     \n 9        9     0.719 HCM     \n10       10     0.729 HCM     \n11       11     0.744 HCM     \n12       12     0.748 HCM"
  },
  {
    "objectID": "qc.html#mitochondrial-percentage",
    "href": "qc.html#mitochondrial-percentage",
    "title": "Quality Control",
    "section": "Mitochondrial percentage",
    "text": "Mitochondrial percentage\n\n\n\n\nCodedataset |>\n    dplyr::mutate(mt_ratio = num_reads_q10_mt / num_reads_q10) |>\n    dplyr::mutate(\n        category = factor(\n            category,\n            levels = c(\"Healthy\", \"ICM\", \"NICM\", \"HCM\") |> rev()\n        )\n    ) |>\n    ggplot2::ggplot(\n        ggplot2::aes(\n            x = mt_ratio, y = category, fill = category\n        )\n    ) +\n    ggridges::geom_density_ridges(alpha = 0.8, color = NA) +\n    ggplot2::scale_x_continuous(\n        labels = scales::percent,\n    ) +\n    ggplot2::scale_fill_manual(\n        values = yarrr::piratepal(palette = \"google\") |>\n            as.character() |> rev(),\n    ) +\n    ggplot2::labs(x = \"Mitochondrial read percentage\", y = NULL) +\n    ggplot2::guides(fill = \"none\") +\n    ggplot2::ggtitle(label = \"Mitochondrial percentage\") +\n    ggplot2::theme_linedraw(base_size = 6, base_family = \"Arial\") +\n    ggplot2::theme(\n        legend.background = ggplot2::element_blank(),\n        plot.title = ggplot2::element_text(\n            family = \"Arial\", size = 6, hjust = 0.5\n        ),\n        plot.background = ggplot2::element_blank()\n    )"
  },
  {
    "objectID": "qc.html#fragment-size-distribution",
    "href": "qc.html#fragment-size-distribution",
    "title": "Quality Control",
    "section": "Fragment size distribution",
    "text": "Fragment size distribution\n\n\n\n\n\nPlot\nData\n\n\n\n\nCodefs::dir_ls(\n    path = file.path(\n        PROJECT_DIR,\n        \"qc\",\n        \"fragment_sizes\",\n        \"raw\"\n    ),\n    regexp = \"fresh.+_CollectInsertSizeMetrics.txt\"\n) |>\n    purrr::map(\\(x) {\n        readr::read_delim(\n            file = x,\n            delim = \"\\t\",\n            skip = 11,\n            show_col_types = FALSE\n        ) |>\n            normalize_fragment_sizes(\n                category = x |>\n                    basename() |>\n                    stringr::str_remove(\n                        pattern = \"_CollectInsertSizeMetrics.txt\"\n                    ) |>\n                    stringr::str_to_title()\n            )\n    }) |>\n    dplyr::bind_rows() |>\n    dplyr::mutate(\n        category = dplyr::case_when(\n            category == \"Fresh_healthy\" ~ \"Healthy\",\n            category == \"Fresh_icm\" ~ \"ICM\",\n            category == \"Fresh_nicm\" ~ \"NICM\",\n            category == \"Fresh_hcm\" ~ \"HCM\"\n        ),\n        category = factor(\n            category,\n            levels = c(\n                \"Healthy\", \"ICM\", \"NICM\", \"HCM\"\n            )\n        )\n    ) |>\n    ggplot2::ggplot(\n        ggplot2::aes(\n            x = insert_size,\n            y = norm_count,\n            color = category\n        )\n    ) +\n    ggplot2::geom_line() +\n    ggplot2::scale_x_continuous(\n        name = \"Fragment size (bp)\",\n        limits = c(0, 1000),\n        breaks = seq(0, 1000, 200)\n    ) +\n    ggplot2::scale_y_continuous(\n        name = \"Norm. read density\",\n        labels = scales::math_format(10^.x)\n    ) +\n    ggplot2::annotation_logticks(base = 10, sides = \"l\", scaled = TRUE) +\n    ggplot2::scale_color_manual(\n        name = NULL,\n        values = as.character(yarrr::piratepal(palette = \"google\"))\n    ) +\n    ggplot2::ggtitle(label = \"Fragment size distribution\") +\n    ggplot2::theme_bw(base_size = 6, base_family = \"Arial\") +\n    ggplot2::theme(\n        legend.background = ggplot2::element_blank(),\n        legend.margin = ggplot2::margin(\n            t = 0, r = 0, b = 0, l = 0, unit = \"mm\"\n        ),\n        legend.spacing.y = ggplot2::unit(0, \"mm\"),\n        legend.key = ggplot2::element_blank(),\n        legend.key.size = ggplot2::unit(3, \"mm\"),\n        legend.text = ggplot2::element_text(\n            family = \"Arial\",\n            size = 5,\n            margin = ggplot2::margin(\n                t = 0, r = 0, b = 0, l = -1, unit = \"mm\"\n            )\n        ),\n        legend.position = c(0.7, 0.9),\n        legend.justification = c(0, 1),\n        legend.box.background = ggplot2::element_blank(),\n        panel.background = ggplot2::element_blank(),\n        plot.title = ggplot2::element_text(\n            family = \"Arial\", size = 6, hjust = 0.5\n        ),\n        plot.background = ggplot2::element_blank()\n    )\n\n\n\n\n\n\n\n\n\nList files.\n\nfs::dir_ls(\n    path = file.path(\n        PROJECT_DIR,\n        \"qc\",\n        \"fragment_sizes\",\n        \"raw\"\n    ),\n    regexp = \"fresh.+_CollectInsertSizeMetrics.txt\"\n)\n\n/Users/jialei/Dropbox/Data/Projects/UTSW/Cardiomyopathy/atac-seq/qc/fragment_sizes/raw/fresh_hcm_CollectInsertSizeMetrics.txt\n/Users/jialei/Dropbox/Data/Projects/UTSW/Cardiomyopathy/atac-seq/qc/fragment_sizes/raw/fresh_healthy_CollectInsertSizeMetrics.txt\n/Users/jialei/Dropbox/Data/Projects/UTSW/Cardiomyopathy/atac-seq/qc/fragment_sizes/raw/fresh_icm_CollectInsertSizeMetrics.txt\n/Users/jialei/Dropbox/Data/Projects/UTSW/Cardiomyopathy/atac-seq/qc/fragment_sizes/raw/fresh_nicm_CollectInsertSizeMetrics.txt\n\n\nInspect data.\n\nfs::dir_ls(\n    path = file.path(\n        PROJECT_DIR,\n        \"qc\",\n        \"fragment_sizes\",\n        \"raw\"\n    ),\n    regexp = \"fresh.+_CollectInsertSizeMetrics.txt\"\n) |>\n    purrr::map(\\(x) {\n        readr::read_delim(\n            file = x,\n            delim = \"\\t\",\n            skip = 11,\n            show_col_types = FALSE\n        ) |>\n            normalize_fragment_sizes(\n                category = x |>\n                    basename() |>\n                    stringr::str_remove(\n                        pattern = \"_CollectInsertSizeMetrics.txt\"\n                    ) |>\n                    stringr::str_to_title()\n            )\n    }) |>\n    dplyr::bind_rows() |>\n    dplyr::mutate(\n        category = dplyr::case_when(\n            category == \"Fresh_healthy\" ~ \"Healthy\",\n            category == \"Fresh_icm\" ~ \"ICM\",\n            category == \"Fresh_nicm\" ~ \"NICM\",\n            category == \"Fresh_hcm\" ~ \"HCM\"\n        ),\n        category = factor(\n            category,\n            levels = c(\n                \"Healthy\", \"ICM\", \"NICM\", \"HCM\"\n            )\n        )\n    ) |>\n    head(n = 12)\n\n# A tibble: 12 × 6\n   insert_size All_Reads.fr_count All_Reads.rf_count all_reads…¹ norm_…² categ…³\n         <dbl>              <dbl>              <dbl>       <dbl>   <dbl> <fct>  \n 1          20                 59                 62          59   -6.53 HCM    \n 2          21                 81                100          81   -6.40 HCM    \n 3          22                135                115         135   -6.17 HCM    \n 4          23                169                174         169   -6.08 HCM    \n 5          24                362                374         362   -5.75 HCM    \n 6          25               1357               1427        1357   -5.17 HCM    \n 7          26              23899              23859       23899   -3.93 HCM    \n 8          27              49856              49877       49856   -3.61 HCM    \n 9          28              46698              46688       46698   -3.64 HCM    \n10          29              46807              46847       46807   -3.63 HCM    \n11          30              42295              42213       42295   -3.68 HCM    \n12          31              36400              36158       36400   -3.74 HCM    \n# … with abbreviated variable names ¹​all_reads_count, ²​norm_count, ³​category"
  },
  {
    "objectID": "qc.html#chromatin-states",
    "href": "qc.html#chromatin-states",
    "title": "Quality Control",
    "section": "Chromatin states",
    "text": "Chromatin states\n\nfragment_size <- fs::dir_ls(\n    path = file.path(\n        PROJECT_DIR,\n        \"qc\",\n        \"fragment_sizes\",\n        \"raw\"\n    ),\n    regexp = \"fresh.+_CollectInsertSizeMetrics.txt\"\n) |>\n    purrr::map(\\(x) {\n        a <- readr::read_delim(\n            file = x,\n            delim = \"\\t\",\n            skip = 11,\n            show_col_types = FALSE\n        )\n        a <- setNames(\n            object = a$All_Reads.fr_count,\n            nm = a$insert_size\n        )\n        a\n    })\n\nnames(fragment_size) <- names(fragment_size) |>\n    basename() |>\n    stringr::str_remove(\n        pattern = \"_CollectInsertSizeMetrics.txt\"\n    )\n\n\nPlot\n\n\n\nCodez <- c(\"Healthy\", \"ICM\", \"NICM\", \"HCM\")\n\npurrr::map2(\n    c(\"fresh_healthy\", \"fresh_icm\", \"fresh_nicm\", \"fresh_hcm\"), z, \\(x, z) {\n        sample_name <- x\n        fragment_size_distribution <- fs::dir_ls(\n            path = file.path(\n                PROJECT_DIR,\n                \"qc/chromatin_states\",\n                \"raw\",\n                sample_name\n            ),\n            regexp = \"\\\\.txt\"\n        ) |>\n            purrr::map(\\(y) {\n                sample_name <- stringr::str_remove(\n                    string = basename(y),\n                    pattern = \".+\\\\.bam_fragments_\"\n                ) |>\n                    str_remove(\n                        pattern = \".txt\"\n                    )\n\n                readr::read_delim(\n                    file = file.path(\n                        y\n                    ),\n                    delim = \"\\t\",\n                    col_names = c(\"fragment_size\", \"count\")\n                ) |>\n                    dplyr::filter(\n                        fragment_size >= 50,\n                        fragment_size <= 750\n                    ) |>\n                    dplyr::mutate(\n                        category = sample_name\n                    ) |>\n                    dplyr::select(\n                        fragment_size,\n                        count,\n                        category\n                    )\n            })\n\n        fragment_size_distribution <- fragment_size_distribution |>\n            purrr::map(\\(x) {\n                x[[\"percentage\"]] <- (\n                    x[[\"count\"]] / (\n                        fragment_size[[sample_name]]\n                    )[x$fragment_size]\n                )\n                x[[\"value\"]] <- as.vector(scale(x[[\"percentage\"]]))\n\n                x_limits <- quantile(x[[\"value\"]], c(0.1, 0.9))\n                x[[\"value\"]][x[[\"value\"]] <= x_limits[1]] <- x_limits[[1]]\n                x[[\"value\"]][x[[\"value\"]] >= x_limits[2]] <- x_limits[[2]]\n                x\n            })\n\n        fragment_size_distribution |>\n            dplyr::bind_rows() |>\n            dplyr::mutate(\n                category = factor(\n                    category,\n                    levels = c(\n                        \"CTCF_binding_site\",\n                        \"promoter\",\n                        \"promoter_flanking_region\",\n                        \"enhancer\",\n                        \"TF_binding_site\",\n                        \"open_chromatin_region\"\n                    ) |> rev()\n                )\n            ) |>\n            ggplot2::ggplot(\n                ggplot2::aes(\n                    x = fragment_size,\n                    y = category,\n                    fill = value\n                )\n            ) +\n            ggplot2::geom_tile(ggplot2::aes(fill = value)) +\n            ggplot2::scale_fill_gradient2(name = NULL) +\n            ggplot2::scale_x_continuous(\n                name = \"Fragment size (bp)\",\n                limits = c(50, 750),\n                breaks = seq(50, 750, 175)\n            ) +\n            ggplot2::scale_y_discrete(name = NULL) +\n            ggplot2::ggtitle(label = z) +\n            ggplot2::theme_linedraw(base_size = 6, base_family = \"Arial\") +\n            ggplot2::theme(\n                legend.background = ggplot2::element_blank(),\n                legend.margin = ggplot2::margin(\n                    t = 0, r = 0, b = 0, l = 0, unit = \"mm\"\n                ),\n                legend.key = ggplot2::element_blank(),\n                legend.key.height = ggplot2::unit(2, \"mm\"),\n                legend.key.width = ggplot2::unit(2, \"mm\"),\n                legend.text = ggplot2::element_text(\n                    family = \"Arial\",\n                    # size = 6,\n                    margin = ggplot2::margin(\n                        t = 0, r = 0, b = 0, l = -0.5, unit = \"mm\"\n                    )\n                ),\n                legend.box.margin = ggplot2::margin(\n                    t = 0, r = 0, b = 0, l = -1, unit = \"mm\"\n                ),\n                legend.box.background = ggplot2::element_blank(),\n                #\n\n                plot.title = ggplot2::element_text(\n                    family = \"Arial\", size = 6, hjust = 0.5\n                )\n            )\n    }\n) |>\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 1) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )"
  }
]